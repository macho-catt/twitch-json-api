{"version":3,"sources":["services/api.js","Header.js","Channel.js","App.js","index.js"],"names":["getAll","a","axios","get","request","data","Header","onClick","className","id","Channel","streamer","status","is_live","src","thumbnail_url","alt","href","display_name","game_name","title","App","filterStatus","useState","streamers","setStreamers","sortByStatus","b","statusA","statusB","nameA","nameB","localeCompare","fetchData","keyword","apiService","allStreamers","sort","onlineStreamers","filter","offlineStreamers","console","error","useEffect","log","event","target","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NASe,GACXA,OANQ,uCAAG,4BAAAC,EAAA,sEACWC,IAAMC,IAHhB,QAED,cACLC,EADK,yBAEJA,EAAQC,MAFJ,2CAAH,sD,OCaGC,EAhBA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEd,OACI,sBAAKC,UAAU,mBAAf,UACI,qBAAKA,UAAU,eAAf,8BAGA,sBAAKA,UAAU,gBAAgBD,QAASA,EAAxC,UACI,qBAAKE,GAAG,oBAAoBD,UAAS,gBAArC,iBACA,qBAAKC,GAAG,uBAAuBD,UAAS,gBAAxC,oBACA,qBAAKC,GAAG,wBAAwBD,UAAS,gBAAzC,4BCSDE,EAnBC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACRC,EAASD,EAAS,GAAGE,QAAU,kBAAoB,mBACzD,OACI,sBAAKL,UAAS,mBAAcI,GAA5B,UACI,sBAAKJ,UAAU,mBAAf,UACI,qBAAKA,UAAU,sBAAf,SACI,qBAAKM,IAAKH,EAAS,GAAGI,cAAeP,UAAU,OAAOQ,IAAI,uBAE9D,qBAAKR,UAAU,sBAAf,SACI,mBAAGS,KAAI,gCAA2BN,EAAS,GAAGO,cAA9C,SAA+DP,EAAS,GAAGO,oBAGnF,qBAAKV,UAAU,wBAAf,SACKG,EAAS,GAAGE,QAAZ,UAAyBF,EAAS,GAAGQ,UAArC,aAAmDR,EAAS,GAAGS,OAAU,gBCoE3EC,EA7EH,WACV,IAAMC,EACC,MADDA,EAEI,SAFJA,EAGK,UAEX,EAAoCC,mBAAS,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KAGMC,EAAe,SAACzB,EAAG0B,GACvB,IAAMC,EAAU3B,EAAE,GAAGY,QACfgB,EAAUF,EAAE,GAAGd,QACfiB,EAAQ7B,EAAE,GAAGiB,aACba,EAAQJ,EAAE,GAAGT,aAGnB,OAAOW,EAAUD,GACfE,EAAME,cAAcD,IAIlBE,EAAS,uCAAG,WAAOC,GAAP,mBAAAjC,EAAA,sEACWkC,EAAWnC,SADtB,OACVoC,EADU,YAGRF,EAHQ,cAITZ,EAJS,SAOTA,EAPS,SAWTA,EAXS,0BAKZG,EAAaW,EAAaC,KAAKX,IALnB,mCAQNY,EAAkBF,EAAaG,QAAO,SAAA5B,GAAQ,OAA4B,IAAxBA,EAAS,GAAGE,WAAkBwB,KAAKX,GAC3FD,EAAaa,GATD,oCAYNE,EAAmBJ,EAAaG,QAAO,SAAA5B,GAAQ,OAA4B,IAAxBA,EAAS,GAAGE,WAAmBwB,KAAKX,GAC7FD,EAAae,GAbD,oCAgBZC,QAAQC,MAAM,cAhBF,iEAAH,sDA4Cf,OALAC,qBAAU,WACRV,EAAUX,KACT,IAEHmB,QAAQG,IAAIpB,GAEV,qBAAKhB,UAAU,YAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAQD,QAzBY,SAACsC,GAEzB,OADAJ,QAAQG,IAAR,mBAAwBC,EAAMC,OAAOrC,KAC7BoC,EAAMC,OAAOrC,IACnB,IAAK,oBACHwB,EAAUX,GACV,MACF,IAAK,uBACHW,EAAUX,GACV,MACF,IAAK,wBACHW,EAAUX,OAgBV,qBAAKd,UAAU,iBAAf,SACGgB,EAAUuB,KAAI,SAAApC,GAAQ,OAAI,cAAC,EAAD,CAASA,SAAUA,GAAeA,EAAS,GAAGF,eCtEnFuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c6827a37.chunk.js","sourcesContent":["import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api'\nconst baseUrl = '/api'\n\nconst getAll = async () => {\n    const request = await axios.get(baseUrl)\n    return request.data\n}\n\nexport default {\n    getAll\n}","\nconst Header = ({ onClick }) => {\n\n    return(\n        <div className=\"header-container\">\n            <div className=\"header-title\">\n                Twitch Streamers\n            </div>\n            <div className=\"header-status\" onClick={onClick}>\n                <div id=\"header-status-all\" className={`status-select`}>All</div>\n                <div id=\"header-status-online\" className={`status-select`}>Online</div>\n                <div id=\"header-status-offline\" className={`status-select`}>Offline</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","\nconst Channel = ({streamer}) => {\n    const status = streamer[0].is_live ? 'streamer-online' : 'streamer-offline'\n    return(\n        <div className={`streamer ${status}`}>\n            <div className=\"stream-logo-name\">\n                <div className=\"stream-logo-section\">\n                    <img src={streamer[0].thumbnail_url} className=\"logo\" alt=\"logo of streamer\" />\n                </div>\n                <div className=\"stream-name-section\">\n                    <a href={`https://www.twitch.tv/${streamer[0].display_name}`}>{streamer[0].display_name}</a>\n                </div>\n            </div>\n            <div className=\"stream-status-section\">\n                {streamer[0].is_live ? `${streamer[0].game_name}: ${streamer[0].title}` : 'Offline'}\n            </div>\n        </div>\n    )\n}\n\nexport default Channel","import React, { useState, useEffect } from 'react'\nimport apiService from './services/api'\nimport Header from './Header'\nimport Channel from './Channel'\n\nconst App = () => {\n  const filterStatus = {\n    ALL: 'all',\n    ONLINE: 'online',\n    OFFLINE: 'offline'\n  }\n  const [ streamers, setStreamers ] = useState([])\n\n  // Sorting function\n  const sortByStatus = (a, b) => {\n    const statusA = a[0].is_live\n    const statusB = b[0].is_live\n    const nameA = a[0].display_name\n    const nameB = b[0].display_name\n    \n    // Sort by online status, then alphabetically by name\n    return statusB - statusA || \n      nameA.localeCompare(nameB)\n  }\n\n  // Get all streamers and display them based on a keyword\n  const fetchData = async (keyword) => {\n    const allStreamers = await apiService.getAll()\n    \n    switch (keyword){\n      case filterStatus.ALL:\n        setStreamers(allStreamers.sort(sortByStatus))\n        break;\n      case filterStatus.ONLINE:\n        const onlineStreamers = allStreamers.filter(streamer => streamer[0].is_live === true).sort(sortByStatus)\n        setStreamers(onlineStreamers)\n        break;\n      case filterStatus.OFFLINE:\n        const offlineStreamers = allStreamers.filter(streamer => streamer[0].is_live === false).sort(sortByStatus)\n        setStreamers(offlineStreamers)\n        break;\n      default:\n        console.error('no keyword')\n        break;\n    }\n  }\n\n  // Display streamers based on the option clicked\n  const headerStatusClick = (event) => {\n    console.log(`clicked: ${event.target.id}`)\n    switch (event.target.id){\n      case \"header-status-all\":\n        fetchData(filterStatus.ALL)\n        break;\n      case \"header-status-online\":\n        fetchData(filterStatus.ONLINE)\n        break;\n      case \"header-status-offline\":\n        fetchData(filterStatus.OFFLINE)\n        break;\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n    fetchData(filterStatus.ALL)\n  }, [])\n\n  console.log(streamers)\n  return (\n    <div className=\"container\">\n      <div className=\"main-container\">\n        <Header onClick={headerStatusClick} />\n        <div className=\"body-container\">\n          {streamers.map(streamer => <Channel streamer={streamer} key={streamer[0].id} />)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}